.data
salto: .word 10
length: .word 7

lista: .word 7
	   .word 5
	   .word -4
	   .word 100
	   .word -250
	   .word 73
	   .word -50

.text
begin:
#Cargamos el tamaño de la lista
lw a3, length
la a2, lista


jal ra, BubbleSort
#jal ra, SigNum
jal end
#-----------------------------------------------------------------------------------
BubbleSort:
#save_context
addi sp, sp, -12
sw ra, 8(sp)
sw a3, 4(sp)
sw a2, 0(sp)
#-------------------
begin_BubbleSort:
mv t5, a3
mv t4, a2
#nueva lista ordenada
mv t6, a2

li t2, 0
li t3, 0
P1:# Se coge el primer elemento y se compara con el siguiente
add t4, t4, t2
lw t0, 0(t4)
lw t1, 4(t4)

addi t2, t2, 4
addi t3, t3, 4

blt t0,t1, P2
bne t3, t5, P1

P2:#En el caso de que sea mayor el de más a la izquierda, entonces se intercambian de posición
sw t0, 4(t3)
sw t1, 0(t3)
addi t3, t3, 1
bne t3, t5, P1

Comprobar_orden:
#Recoremos el array para ver si esta totalmente ordenado

end_BubbleSort:
#restore_context
lw a2, 0(sp)
lw a3, 4(sp)
lw ra, 8(sp)
addi sp, sp, 12
#-------------------
SigNum:
#save_context
addi sp, sp, -8
sw ra, 4(sp)
sw a1, 0(sp)
#-------------------
li t2, 0
li t1, 0
begin_SigNum:
add a2, a2, t1 #lo inicializamos en 0
lw a1, 0(a2) #cargamos en a1 el elemento q corresponda a la dirrecion a2
jal ra, imprimir_enteros # Saltamos al procedimiento de imprimir entero con salto de linea
#-------------------
addi t1, t1, 4 # Se va sumando 4 a  la posicion actual del array, este corresponed al tamaño de un .word
addi t2, t2, 1 # Vamos contando uno a uno los elementes de la lista, para cuando sea igual al tamaño de esta, terminara el procedimiento
bne t2, a3, SigNum

#restore_context
lw a1, 0(sp)
lw ra, 4(sp)
addi sp, sp, 8
#-------------------
jalr zero, ra, 0

#-----------------------------------------------------------------------------------
imprimir_enteros:
begin_imprimir_enteros:
#save_context
addi sp, sp, -8
sw ra, 4(sp)
sw a1, 0(sp)
#-------------------
#Imprime el numero entero
mv a0, a1
li a7,1
ecall

#-----------------------------------------------------------------------------------
#salto_de_linea:
#begin_salto_de_linea:

lw a0,salto		# cargamos el valor 10
li a7,11 		# imprimimos el salto de linea ya que en codigo ASCII 10 es igual a \n
ecall

#end_salto_de_linea:
#----------------------------------------------------

end_imprimir_enteros:
#restore_context
lw a1, 0(sp)
lw ra, 4(sp)
addi sp, sp, 8
#-------------------
jalr zero, ra, 0

#-----------------------------------------------------------------------------------
end:
li a7,10
ecall